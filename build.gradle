plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group 'org.jfrog.filespecs'
version currentVersion

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenLocal()
    maven {
        url "https://releases.jfrog.io/artifactory/oss-snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "https://releases.jfrog.io/artifactory/oss-releases"
    }
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.6'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'org.testng:testng:7.5'
    testImplementation 'commons-io:commons-io:2.11.0'
}

test {
    test.useTestNG()
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        minGranularity 0
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

publishing {
    def publication = publications.create("mavenJava", MavenPublication) {
        artifact sourcesJar
        artifact javadocJar
        from components.java

        pom {
            name = project.name
            description = project.description ?: "JFrog File Spec Java"
            url = 'https://www.jfrog.com/confluence/display/JFROG/Using+File+Specs'

            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    name = 'JFrog'
                    email = 'eco-system@jfrog.com'
                }
            }
            scm {
                connection = 'scm:git:git://github.com/jfrog/file-specs-java.git'
                developerConnection = 'scm:git:git@github.com:jfrog/file-specs-java.git'
                url = 'https://github.com/jfrog/file-specs-java'
            }
        }
    }
    signing {
        required { project.hasProperty('sign') }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publication
    }

    if (project.plugins.hasPlugin('Artifactory')) {
        artifactoryPublish {
            publications(publication)
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
